openapi: 3.0.0
info:
  title: 書籍管理アプリのAPI
  version: 1.0.0
paths:
  /api/internal-books:
    get:
      tags:
        - 全ユーザー向け機能
      summary: 社内書籍の一覧を閲覧
      parameters:
        - in: query
          name: book_name
          description: 書籍名での部分検索
          required: false
          schema:
            type: string
        - in: query
          name: book_category_id
          description: 書籍カテゴリーでソート
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Internal-books are fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Internal-book'

  /api/internal-books/{book_id}:
    get:
      tags:
        - 全ユーザー向け機能
      summary: 社内書籍の詳細を閲覧
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Internal-book is fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  book:
                    $ref: '#/components/schemas/Internal-book'
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'

  /api/book-reviews:
    get:
      tags:
        - 全ユーザー向け機能
      summary: 社内の口コミ一覧を閲覧
      parameters:
        - in: query
          name: book_name
          description: 書籍名での部分検索
          required: false
          schema:
            type: string
        - in: query
          name: book_category_id
          description: 書籍カテゴリーでソート
          required: false
          schema:
            type: integer
        - in: query
          name: user_id
          description: 特定のユーザーの口コミを検索
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Book-reviews are fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review-with-book'

  /api/book-reviews/{review_id}:
    get:
      tags:
        - 全ユーザー向け機能
      summary: 社内の口コミの詳細を閲覧
      parameters:
        - in: path
          name: review_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book-review is fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review-with-book'

  /api/external-books:
    get:
      tags:
        - 全ユーザー向け機能
      summary: 世の書籍の一覧を閲覧
      parameters:
        - in: query
          name: book_name
          description: 書籍名での部分検索
          required: false
          schema:
            type: string
        - in: query
          name: book_category_id
          description: 書籍カテゴリーでソート
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Internal-books are fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/External-book'

  /api/user/books/{book_id}/borrow:
    post:
      tags:
        - 社員向け機能
      summary: 社員が書籍を借りる
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Borrow-request-body'
      responses:
        '201':
          description: User borrowed a book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrow-request-body'

  /api/user/books/{book_id}/return:
    post:
      tags:
        - 社員向け機能
      summary: 書籍を返却する
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Return-request-body'
      responses:
        '201':
          description: User borrowed a book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Return-request-body'

  /api/user/book-reviews:
    post:
      tags:
        - 社員向け機能
      summary: 社員が口コミを投稿する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review-create-body'
      responses:
        '201':
          description: User posted a review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review-create-body'

  /api/user/book_reviews/{review_id}:
    post:
      tags:
        - 社員向け機能
      summary: 社員が口コミを編集する
      parameters:
        - in: path
          name: review_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review-create-body'
      responses:
        '201':
          description: User edited the review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review-create-body'

  /api/user/book_reviews/{review_id}/reaction:
    post:
      tags:
        - 社員向け機能
      summary: 社員が口コミへリアクションする
      parameters:
        - in: path
          name: review_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction-request-body'
      responses:
        '201':
          description: User reacted to the review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction-request-body'

  /api/user/book-requests:
    post:
      tags:
        - 社員向け機能
      summary: 社員が特定の書籍の購入依頼をする
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase-request-body'
      responses:
        '201':
          description: User reacted to the review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase-request-body'

  /api/user/my-page:
    get:
      tags:
        - 社員向け機能
      summary: 社員がマイページを閲覧
      responses:
        '200':
          description: Mypage data is fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mypage'

  /api/user/{user_id}/reading-log:
    get:
      tags:
        - 社員向け機能
      summary: 社員が特定の社員の読書履歴を閲覧
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reading-log is fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reading-log'

  /api/user/gift:
    post:
      tags:
        - 社員向け機能
      summary: 社員が特定の社員にspecial-pointを送る
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gift-create-body'
      responses:
        '201':
          description: User sent point
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gift-create-body'

  /api/user/gift-request:
    get:
      tags:
        - 社員向け機能
      summary: ユーザーが送ったor送られたギフトリクエストの一覧を閲覧
      responses:
        '200':
          description: Gift-requests are fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GiftRequest'
    post:
      tags:
        - 社員向け機能
      summary: 社員が特定の社員にspecial-pointの送信を依頼
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftRequest-create-body'
      responses:
        '201':
          description: User requested point
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftRequest-create-body'

  /api/user/gift-request/{request_id}:
    delete:
      tags:
        - 社員向け機能
      summary: special-point送信の依頼を削除
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Gift-request is deleted

components:
  schemas:
    Book:
      type: object
      required:
        - bookId
        - bookName
        - bookGenreName
        - bookImage
        - bookPublisher
        - authorId
        - authorName
      properties:
        bookId:
          type: integer
          example: 1
        bookName:
          type: string
          example: リーダブルコード
        bookGenreName:
          type: array
          items:
            type: string
            example: 技術, IT
        bookImage:
          type: string
          example: https://example-book.jpeg
        bookPublisher:
          type: string
          example: 講談社
        authorId:
          type: integer
          example: 1
        authorName:
          type: string
          example: ダスティン・ボズウェル

    Internal-book:
      required:
        - averageReviewRate
        - rentalInformation
      allOf:
        - $ref: '#/components/schemas/Book'
        - properties:
            averageReviewRate:
              type: number
              example: 4.3
            rentalInformation:
              type: boolean
              example: false

    #ここでのプロパティ名は Rakuten Books Total Search API を参考にしている
    External-book:
      required:
        - title
        - author
        - booksGenreName
        - publisherName
        - smallImageUrl
        - mediumImageUrl
        - largeImageUrl
      properties:
        title:
          type: string
          example: リーダブルコード
        author:
          type: string
          example: ダスティン・ボズウェル
        booksGenreName:
          type: array
          items:
            type: string
            example: 技術, IT
        publisherName:
          type: string
          example: 講談社
        smallImageUrl:
          type: string
          example: https://example-book-small.jpeg
        mediumImageUrl:
          type: string
          example: https://example-book-medium.jpeg
        largeImageUrl:
          type: string
          example: https://example-book-large.jpeg

    Review:
      type: object
      required:
        - userId
        - userName
        - userIcon
        - reviewRate
        - reviewTitle
        - reviewContent
        - createdAt
      properties:
        userId:
          type: integer
          example: 1
        userName:
          type: string
          example: 1
        userIcon:
          type: string
          example: https://example-icon.jpeg
        reviewRate:
          type: integer
          example: 4
        reviewTitle:
          type: string
          example: とても勉強になりました！
        reviewContent:
          type: string
          example: 学んだこと：ーーー / おすすめしたい人：〜〜〜
        createdAt:
          type: string
          example: '2024-06-21'
          format: date

    Review-with-book:
      allOf:
        - $ref: '#/components/schemas/Book'
        - $ref: '#/components/schemas/Review'

    Review-create-body:
      type: object
      required:
        - userId
        - bookId
        - reviewRate
        - reviewTitle
        - reviewContent
      properties:
        userId:
          type: integer
          example: 1
        bookId:
          type: integer
          example: 1
        reviewRate:
          type: integer
          example: 4
        reviewTitle:
          type: string
          example: とても勉強になりました！
        review_cotent:
          type: string
          example: 学んだこと：ーーー / おすすめしたい人：〜〜〜

    Borrow-request-body:
      type: object
      required:
        - userId
        - bookId #isbnと悩み
        - startDate
        - endDate
      properties:
        userId:
          type: integer
          example: 1
        bookId:
          type: integer
          example: 1
        startDate:
          type: string
          example: '2024-07-21'
          format: date
        endDate:
          type: string
          example: '2024-08-21'
          format: date

    Return-request-body:
      type: object
      required:
        - userId
        - bookId
      properties:
        userId:
          type: integer
          example: 1
        bookId:
          type: integer
          example: 1

    Reaction-request-body:
      type: object
      required:
        - userId
        - reviewId
        - stampId
      properties:
        userId:
          type: integer
          example: 1
        reviewId:
          type: integer
          example: 1
        stampId:
          type: integer
          example: 1

    Purchase-request-body:
      type: object
      required:
        - title
        - author
        - publisherName #以上3つは外部書籍を特定するためのもの。改良の余地あり
        - userID
        - purchaseType
      properties:
        title:
          type: string
          example: リーダブルコード
        author:
          type: string
          example: ダスティン・ボズウェル
        publisherName:
          type: string
          example: 講談社
        userId:
          type: integer
          example: 1
        purchaseType:
          type: string
          enum:
            - 会社用
            - 個人用

    Mypage:
      type: object
      required:
        - userId
        - userName
        - userIcon
        - monthPoint
        - specialPoint
      properties:
        userId:
          type: integer
          example: 1
        userName:
          type: string
          example: 1
        userIcon:
          type: string
          example: https://example-icon.jpeg
        monthPoint:
          type: integer
          # description: 1ヶ月毎にリセットされるポイントの残り / 1pt=1円
          example: 3000
        specialPoint:
          type: integer
          # description: 口コミ投稿時などに獲得できて、永久に消えないポイントの残り / 1pt=1円
          example: 1200

    Reading-log:
      type: object
      required:
        - bookId
        - bookName
        - bookGenreName
        - bookImage
        - authorId
        - authorName
        - reviewId #リンクでreview詳細画面に飛べるように
        - reviewRate
        - reviewTitle
      properties:
        bookId:
          type: integer
          example: 1
        bookName:
          type: string
          example: リーダブルコード
        bookGenreName:
          type: array
          items:
            type: string
            example: 技術, IT
        bookImage:
          type: string
          example: https://example-book.jpeg
        authorId:
          type: integer
          example: 1
        authorName:
          type: string
          example: ダスティン・ボズウェル
        reviewId:
          type: integer
          example: 1
        reviewRate:
          type: integer
          example: 4
        reviewTitle:
          type: string
          example: とても勉強になりました！

    Gift-create-body:
      type: object
      required:
        - pointSendUserId
        - pointReceivedUserId
        - point
      properties:
        pointSendUserId:
          type: integer
          example: 1
        pointReceivedUserId:
          type: integer
          example: 1
        point:
          type: integer
          example: 2500

    GiftRequest-create-body:
      type: object
      required:
        - requestUserId
        - receivedUserId
      properties:
        requestUserId:
          type: integer
          example: 1
        receivedUserId:
          type: integer
          example: 1
        point:
          type: integer
          example: 2500

    GiftRequest:
      type: object
      required:
        - sendOrReceive
        - pointSendUserId
        - pointReceivedUserId
        - point
      properties:
        sendOrReceive:
          type: string
          enum:
            - point送信
            - point受信
        pointSendUserId:
          type: integer
          example: 1
        pointReceivedUserId:
          type: integer
          example: 1
        point:
          type: integer
          example: 2500
